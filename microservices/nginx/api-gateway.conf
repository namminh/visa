# API Gateway Configuration for Mini-Visa Microservices

# Upstream service definitions
upstream payment-service {
    server payment-service:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream risk-service {
    server risk-service:8081 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream clearing-service {
    server clearing-service:8082 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream ledger-service {
    server ledger-service:8083 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

upstream reversal-service {
    server reversal-service:8084 max_fails=3 fail_timeout=30s;
    keepalive 8;
}

upstream query-service {
    server query-service:8085 max_fails=3 fail_timeout=30s;
    keepalive 16;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=payments:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;

# Main server configuration
server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Logging
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # General settings
    client_max_body_size 1M;
    proxy_connect_timeout 5s;
    proxy_send_timeout 10s;
    proxy_read_timeout 10s;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Health check endpoint for load balancer
    location /health {
        access_log off;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Payment Service Routes
    location /payments/ {
        limit_req zone=payments burst=20 nodelay;
        
        # Add request ID for tracing
        proxy_set_header X-Request-ID $request_id;
        
        proxy_pass http://payment-service;
        
        # Retry configuration
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 10s;
    }

    # Risk Service Routes
    location /risk/ {
        limit_req zone=general burst=50 nodelay;
        proxy_set_header X-Request-ID $request_id;
        proxy_pass http://risk-service;
    }

    # Clearing Service Routes (Internal only - no direct external access)
    location /clearing/ {
        # Allow only internal network access
        allow 172.20.0.0/16;
        deny all;
        
        proxy_set_header X-Request-ID $request_id;
        proxy_pass http://clearing-service;
    }

    # Ledger Service Routes (Internal only)
    location /ledger/ {
        allow 172.20.0.0/16;
        deny all;
        
        proxy_set_header X-Request-ID $request_id;
        proxy_pass http://ledger-service;
    }

    # Query Service Routes (Read-only operations)
    location /query/ {
        limit_req zone=general burst=100 nodelay;
        proxy_set_header X-Request-ID $request_id;
        proxy_pass http://query-service;
        
        # Cache GET requests for query service
        location ~* ^/query/.+\.(GET)$ {
            proxy_cache_valid 200 1m;
            proxy_cache_valid 404 10s;
            add_header X-Cache-Status $upstream_cache_status;
        }
    }

    # Metrics endpoints (secured)
    location /metrics {
        # Allow only monitoring systems
        allow 172.20.0.0/16;
        allow 127.0.0.1;
        deny all;
        
        # Round-robin to all services for metrics collection
        location /metrics/payments {
            proxy_pass http://payment-service/metrics;
        }
        
        location /metrics/risk {
            proxy_pass http://risk-service/metrics;
        }
        
        location /metrics/clearing {
            proxy_pass http://clearing-service/metrics;
        }
        
        location /metrics/ledger {
            proxy_pass http://ledger-service/metrics;
        }
        
        location /metrics/query {
            proxy_pass http://query-service/metrics;
        }
    }

    # Admin endpoints (highly secured)
    location /admin {
        # Allow only from local network
        allow 172.20.0.0/16;
        allow 127.0.0.1;
        deny all;
        
        # Basic auth (in production, use stronger auth)
        auth_basic "Admin Area";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_set_header X-Request-ID $request_id;
        proxy_pass http://payment-service;
    }

    # WebSocket support for monitoring dashboards
    location /ws {
        proxy_pass http://grafana:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # Static assets for monitoring UI
    location /static/ {
        root /usr/share/nginx/html;
        expires 1h;
        add_header Cache-Control "public, immutable";
    }

    # API documentation
    location /docs {
        return 301 /static/api-docs/index.html;
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Default fallback
    location / {
        return 404 '{"error":"endpoint_not_found","message":"Check API documentation"}';
        add_header Content-Type application/json;
    }

    # Error pages
    error_page 404 /404.json;
    error_page 500 502 503 504 /50x.json;

    location = /404.json {
        internal;
        return 404 '{"error":"not_found","message":"The requested resource was not found"}';
        add_header Content-Type application/json;
    }

    location = /50x.json {
        internal;
        return 500 '{"error":"internal_server_error","message":"Please try again later"}';
        add_header Content-Type application/json;
    }
}

# HTTPS server (for production)
server {
    listen 443 ssl http2;
    server_name localhost;

    # SSL configuration (use proper certificates in production)
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Include all the same location blocks from the HTTP server
    include /etc/nginx/conf.d/shared-locations.conf;
}